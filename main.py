import streamlit as st

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Sistema de An√°lisis Meteorol√≥gico - Papallacta",
    page_icon="üå¶Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    # T√≠tulo principal
    st.title("üå¶Ô∏è Sistema de An√°lisis Meteorol√≥gico e Hidrol√≥gico")
    st.markdown("### Estaci√≥n Papallacta")
    st.markdown("---")
    
    # Sidebar para navegaci√≥n
    st.sidebar.title("üß≠ Navegaci√≥n")
    
    # Opciones del men√∫
    menu_options = {
        "üìä Dashboard Principal": "dashboard",
        "üîÆ Predicciones (Forecasting)": "forecasting",
        "üìö Informaci√≥n del Sistema": "info"
    }
    
    selected_option = st.sidebar.selectbox(
        "Selecciona una opci√≥n:",
        list(menu_options.keys())
    )
    
    # Ejecutar la opci√≥n seleccionada
    option_key = menu_options[selected_option]
    
    if option_key == "dashboard":
        # Importar y ejecutar dashboard principal
        try:
            import dashboard
            # El dashboard se ejecutar√° autom√°ticamente al importarlo
        except ImportError as e:
            st.error(f"Error al cargar el dashboard principal: {e}")
        except Exception as e:
            st.error(f"Error inesperado en el dashboard: {e}")
    
    elif option_key == "forecasting":
        # Importar y ejecutar m√≥dulo de forecasting
        try:
            from forecast_module import run_forecast_module
            run_forecast_module()
        except ImportError as e:
            st.error(f"Error al cargar el m√≥dulo de forecasting: {e}")
            st.info("Aseg√∫rate de que todas las dependencias est√©n instaladas: `pip install -r requirements.txt`")
        except Exception as e:
            st.error(f"Error inesperado en forecasting: {e}")
    
    elif option_key == "info":
        show_system_info()

def show_system_info():
    """Muestra informaci√≥n del sistema"""
    st.header("üìö Informaci√≥n del Sistema")
    
    st.markdown("""
    ## üåü Descripci√≥n General
    
    Este sistema proporciona herramientas completas para el an√°lisis de datos meteorol√≥gicos e 
    hidrol√≥gicos de la estaci√≥n Papallacta, incluyendo:
    
    ### üìä Dashboard Principal
    - **Visualizaci√≥n interactiva** de series temporales
    - **An√°lisis estad√≠stico** completo con histogramas y box plots
    - **Comparaci√≥n temporal** entre diferentes per√≠odos
    - **M√©tricas en tiempo real** de las variables
    - **Filtros personalizables** por fecha y variable
    
    ### üîÆ M√≥dulo de Predicciones
    - **Forecasting a corto y largo plazo** (hasta 2 a√±os)
    - **M√∫ltiples algoritmos** de predicci√≥n:
      - Regresi√≥n Lineal
      - Naive Estacional
      - Promedio M√≥vil
      - Suavizado Exponencial (Holt-Winters)
      - ARIMA
    - **Descomposici√≥n de series temporales**
    - **Intervalos de confianza** para todas las predicciones
    - **Comparaci√≥n de m√©todos** en un solo gr√°fico
    - **Exportaci√≥n de resultados** en formato CSV
    
    ## üìà Variables Disponibles
    
    ### Hidrol√≥gicas
    - **Caudal** (m¬≥/s)
    - **Nivel de Agua** (m)
    
    ### Meteorol√≥gicas
    - **Temperatura Ambiente** (¬∞C)
    - **Precipitaci√≥n** (mm)
    - **Humedad Relativa** (%)
    - **Presi√≥n Atmosf√©rica** (hPa)
    - **Radiaci√≥n Solar** (W/m¬≤)
    - **Velocidad del Viento** (m/s)
    - **Direcci√≥n del Viento** (¬∞)
    
    ## üõ†Ô∏è Tecnolog√≠as Utilizadas
    
    - **Streamlit**: Framework para aplicaciones web interactivas
    - **Pandas**: Manipulaci√≥n y an√°lisis de datos
    - **Plotly**: Visualizaciones interactivas avanzadas
    - **NumPy**: C√°lculos num√©ricos eficientes
    - **SciPy**: An√°lisis estad√≠stico
    - **Statsmodels**: Modelos estad√≠sticos y forecasting avanzado
    - **Scikit-learn**: Machine learning (opcional)
    
    ## üöÄ Caracter√≠sticas Avanzadas
    
    ### Dashboard
    - **Caching inteligente** para mejor rendimiento
    - **Responsive design** adaptable a diferentes pantallas
    - **Tooltips interactivos** con informaci√≥n detallada
    - **Zoom y pan** en todos los gr√°ficos
    - **M√©tricas comparativas** con per√≠odos anteriores
    
    ### Forecasting
    - **Validaci√≥n autom√°tica** de la calidad de los datos
    - **Detecci√≥n de outliers** y limpieza de datos
    - **An√°lisis de estacionalidad** autom√°tico
    - **M√©tricas de evaluaci√≥n** (MAE, RMSE, MAPE)
    - **Intervalos de confianza** calculados estad√≠sticamente
    
    ## üìä Casos de Uso
    
    1. **Monitoreo en tiempo real** de condiciones meteorol√≥gicas
    2. **An√°lisis de tendencias** clim√°ticas a largo plazo
    3. **Predicci√≥n de eventos** meteorol√≥gicos extremos
    4. **Planificaci√≥n agr√≠cola** basada en datos hist√≥ricos
    5. **Gesti√≥n de recursos h√≠dricos**
    6. **Investigaci√≥n climatol√≥gica**
    
    ## üîß Instalaci√≥n y Configuraci√≥n
    
    ```bash
    # Instalar dependencias
    pip install -r requirements.txt
    
    # Ejecutar el sistema
    streamlit run main.py
    ```
    
    ## üìû Soporte T√©cnico
    
    Para problemas t√©cnicos:
    1. Verifica que todos los archivos CSV est√©n en `datasets_limpios/`
    2. Aseg√∫rate de que las dependencias est√©n instaladas
    3. Revisa los logs en la consola para errores espec√≠ficos
    
    ---
    
    **Desarrollado para el an√°lisis avanzado de datos meteorol√≥gicos e hidrol√≥gicos** üå¶Ô∏èüìä
    """)
    
    # Mostrar estad√≠sticas del sistema
    st.subheader("üìä Estad√≠sticas del Sistema")
    
    try:
        import os
        datasets_path = "datasets_limpios"
        if os.path.exists(datasets_path):
            files = [f for f in os.listdir(datasets_path) if f.endswith('.csv')]
            
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Datasets Disponibles", len(files))
            with col2:
                total_size = sum(os.path.getsize(os.path.join(datasets_path, f)) for f in files)
                st.metric("Tama√±o Total", f"{total_size / (1024*1024):.1f} MB")
            with col3:
                import pandas as pd
                total_records = 0
                for file in files:
                    try:
                        df = pd.read_csv(os.path.join(datasets_path, file))
                        total_records += len(df)
                    except:
                        pass
                st.metric("Registros Totales", f"{total_records:,}")
        else:
            st.warning("Carpeta 'datasets_limpios' no encontrada")
    
    except Exception as e:
        st.error(f"Error calculando estad√≠sticas: {e}")

if __name__ == "__main__":
    main()
